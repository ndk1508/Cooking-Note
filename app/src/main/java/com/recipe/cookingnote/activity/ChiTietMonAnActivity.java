package com.recipe.cookingnote.activity;

import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.net.Uri;
import android.os.Bundle;
import android.widget.Button;
import android.widget.ImageButton; // Th√™m
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;

import com.recipe.cookingnote.R;
import com.recipe.cookingnote.database.DatabaseHelper;

/**
 * ChiTietMonAnActivity
 * ----------------------
 * M√†n h√¨nh hi·ªÉn th·ªã chi ti·∫øt m·ªôt m√≥n ƒÉn trong ·ª©ng d·ª•ng Cooking Note.
 * - Hi·ªÉn th·ªã ·∫£nh, t√™n, nguy√™n li·ªáu, v√† c√°c b∆∞·ªõc n·∫•u.
 * - C√≥ th·ªÉ s·ª≠a, x√≥a, ho·∫∑c th√™m / g·ª° kh·ªèi danh s√°ch y√™u th√≠ch.
 *
 * D·ªØ li·ªáu ƒë∆∞·ª£c truy xu·∫•t t·ª´ SQLite qua DatabaseHelper.
 */
public class ChiTietMonAnActivity extends AppCompatActivity {

    // Kh√≥a Intent ƒë·ªÉ truy·ªÅn ID m√≥n ƒÉn gi·ªØa Activity
    public static final String EXTRA_MONAN_ID = "EXTRA_MONAN_ID";

    // C√°c View trong layout layout_chi_tiet.xml
    private ImageView imgChiTiet;
    private TextView txtTenMonChiTiet, txtNguyenLieuChiTiet, txtBuocLamChiTiet;
    private Button btnSua, btnXoa;
    private ImageButton btnBack;

    // H·ªó tr·ª£ l√†m vi·ªác v·ªõi c∆° s·ªü d·ªØ li·ªáu SQLite
    private DatabaseHelper dbHelper;

    // Bi·∫øn l∆∞u ID m√≥n ƒÉn hi·ªán t·∫°i (ƒë∆∞·ª£c truy·ªÅn t·ª´ m√†n h√¨nh tr∆∞·ªõc)
    private int currentMonAnId = -1;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.layout_chi_tiet);

        // ===================== √ÅNH X·∫† VIEW T·ª™ LAYOUT =====================
        imgChiTiet = findViewById(R.id.imgChiTiet);
        txtTenMonChiTiet = findViewById(R.id.txtTenMonChiTiet);
        txtNguyenLieuChiTiet = findViewById(R.id.txtNguyenLieuChiTiet);
        txtBuocLamChiTiet = findViewById(R.id.txtBuocLamChiTiet);
        btnSua = findViewById(R.id.btnSua);
        btnXoa = findViewById(R.id.btnXoa);
        btnBack = findViewById(R.id.btnBack);
        ImageButton btnFavorite = findViewById(R.id.btnFavorite);

        // ===================== KH·ªûI T·∫†O DATABASE HELPER =====================
        dbHelper = new DatabaseHelper(this);

        // ===================== L·∫§Y ID M√ìN ƒÇN TRUY·ªÄN QUA INTENT =====================
        currentMonAnId = getIntent().getIntExtra(EXTRA_MONAN_ID, -1);

        // N·∫øu kh√¥ng c√≥ ID ‚Üí Th√¥ng b√°o l·ªói v√† tho√°t Activity
        if (currentMonAnId == -1) {
            Toast.makeText(this, "Kh√¥ng t√¨m th·∫•y m√≥n ƒÉn!", Toast.LENGTH_SHORT).show();
            finish();
            return;
        }

        // ===================== KI·ªÇM TRA TR·∫†NG TH√ÅI Y√äU TH√çCH =====================
        // M·ªü DB ·ªü ch·∫ø ƒë·ªô ƒë·ªçc ƒë·ªÉ ki·ªÉm tra xem m√≥n n√†y c√≥ trong b·∫£ng YeuThich hay kh√¥ng
        SQLiteDatabase dbCheck = dbHelper.getReadableDatabase();
        Cursor cursorCheck = dbCheck.rawQuery(
                "SELECT idMonAn FROM YeuThich WHERE idMonAn = ?", // C√¢u SQL
                new String[]{String.valueOf(currentMonAnId)}
        );
        if (cursorCheck.moveToFirst()) {
            // N·∫øu c√≥ trong b·∫£ng YeuThich ‚Üí hi·ªán tim ƒë·∫ßy
            btnFavorite.setImageResource(R.drawable.ic_heart);
        } else {
            // N·∫øu kh√¥ng c√≥ ‚Üí hi·ªán tim r·ªóng
            btnFavorite.setImageResource(R.drawable.ic_heart_hollow);
        }
        cursorCheck.close();
        dbCheck.close();

        // ===================== C√ÅC N√öT CH·ª®C NƒÇNG =====================

        // üîô N√∫t quay l·∫°i: ƒë√≥ng Activity hi·ªán t·∫°i, tr·ªü v·ªÅ m√†n h√¨nh tr∆∞·ªõc
        btnBack.setOnClickListener(v -> finish());

        // ‚úèÔ∏è N√∫t s·ª≠a: m·ªü Activity ThemMonAnActivity v·ªõi ch·∫ø ƒë·ªô ‚Äús·ª≠a m√≥n ƒÉn‚Äù
        btnSua.setOnClickListener(v -> {
            Intent intent = new Intent(ChiTietMonAnActivity.this, ThemMonAnActivity.class);
            intent.putExtra(ThemMonAnActivity.EXTRA_EDIT_MONAN_ID, currentMonAnId);
            startActivity(intent);
        });

        // üóëÔ∏è N√∫t x√≥a: hi·ªÉn th·ªã h·ªôp tho·∫°i x√°c nh·∫≠n x√≥a
        btnXoa.setOnClickListener(v -> showDeleteConfirmDialog());

        // ‚ù§Ô∏è N√∫t y√™u th√≠ch: th√™m / x√≥a m√≥n kh·ªèi b·∫£ng YeuThich
        btnFavorite.setOnClickListener(v -> {
            SQLiteDatabase db = dbHelper.getWritableDatabase();
            try {
                // Ki·ªÉm tra xem m√≥n ƒë√£ t·ªìn t·∫°i trong b·∫£ng YeuThich ch∆∞a
                Cursor cursor = db.rawQuery(
                        "SELECT idMonAn FROM YeuThich WHERE idMonAn = ?",
                        new String[]{String.valueOf(currentMonAnId)}
                );

                if (cursor.moveToFirst()) {
                    // N·∫øu ƒë√£ y√™u th√≠ch ‚Üí X√≥a kh·ªèi YeuThich
                    db.delete("YeuThich", "idMonAn = ?", new String[]{String.valueOf(currentMonAnId)});
                    btnFavorite.setImageResource(R.drawable.ic_heart_hollow);
                    Toast.makeText(this, "ƒê√£ x√≥a kh·ªèi y√™u th√≠ch", Toast.LENGTH_SHORT).show();
                } else {
                    // N·∫øu ch∆∞a ‚Üí Th√™m v√†o YeuThich
                    db.execSQL("INSERT INTO YeuThich (idMonAn) VALUES (?)",
                            new Object[]{currentMonAnId});
                    btnFavorite.setImageResource(R.drawable.ic_heart);
                    Toast.makeText(this, "ƒê√£ th√™m v√†o y√™u th√≠ch", Toast.LENGTH_SHORT).show();
                }
                cursor.close();
            } catch (Exception e) {
                Toast.makeText(this, "L·ªói khi th√™m v√†o y√™u th√≠ch!", Toast.LENGTH_SHORT).show();
            } finally {
                db.close(); // ƒê·∫£m b·∫£o ƒë√≥ng DB d√π c√≥ l·ªói hay kh√¥ng
            }
        });
    }

    // ===================== KHI M√ÄN H√åNH HI·ªÇN TH·ªä TR·ªû L·∫†I =====================
    @Override
    protected void onResume() {
        super.onResume();
        // N·∫øu c√≥ ID h·ª£p l·ªá ‚Üí load l·∫°i chi ti·∫øt m√≥n ƒÉn
        if (currentMonAnId != -1) {
            loadMonAnDetails(currentMonAnId);
        } else {
            Toast.makeText(this, "Kh√¥ng t√¨m th·∫•y m√≥n ƒÉn!", Toast.LENGTH_SHORT).show();
            finish();
        }
    }

    /**
     * H√†m t·∫£i chi ti·∫øt m√≥n ƒÉn (t√™n, ·∫£nh, nguy√™n li·ªáu, c√°c b∆∞·ªõc)
     * D·ªØ li·ªáu l·∫•y t·ª´ nhi·ªÅu b·∫£ng: MonAn, NguyenLieu, BuocNau
     */
    private void loadMonAnDetails(int id) {
        SQLiteDatabase db = dbHelper.getReadableDatabase();
        try {
            // ================== L·∫§Y TH√îNG TIN C∆† B·∫¢N C·ª¶A M√ìN ==================
            String queryMonAn = "SELECT tenMon, anhMon FROM MonAn WHERE idMonAn = ?";
            try (Cursor cursorMonAn = db.rawQuery(queryMonAn, new String[]{String.valueOf(id)})) {
                if (cursorMonAn.moveToFirst()) {
                    // C·∫≠p nh·∫≠t t√™n m√≥n
                    txtTenMonChiTiet.setText(cursorMonAn.getString(0));

                    // L·∫•y ƒë∆∞·ªùng d·∫´n ho·∫∑c ID ·∫£nh
                    String anhPath = cursorMonAn.getString(1);
                    if (anhPath != null && !anhPath.isEmpty()) {
                        try {
                            // N·∫øu ·∫£nh l∆∞u d∆∞·ªõi d·∫°ng ID (int trong resource)
                            imgChiTiet.setImageResource(Integer.parseInt(anhPath));
                        } catch (NumberFormatException e) {
                            // N·∫øu l√† ƒë∆∞·ªùng d·∫´n (URI)
                            imgChiTiet.setImageURI(Uri.parse(anhPath));
                        }
                    } else {
                        // N·∫øu kh√¥ng c√≥ ·∫£nh ‚Üí d√πng ·∫£nh m·∫∑c ƒë·ªãnh
                        imgChiTiet.setImageResource(R.drawable.ic_image_placeholder);
                    }
                }
            }

            // ================== L·∫§Y DANH S√ÅCH NGUY√äN LI·ªÜU ==================
            StringBuilder nguyenLieuBuilder = new StringBuilder();
            try (Cursor cursorNguyenLieu = db.rawQuery(
                    "SELECT tenNguyenLieu FROM NguyenLieu WHERE idMonAn = ?",
                    new String[]{String.valueOf(id)})) {
                while (cursorNguyenLieu.moveToNext()) {
                    nguyenLieuBuilder.append("‚Ä¢ ")
                            .append(cursorNguyenLieu.getString(0))
                            .append("\n");
                }
            }
            txtNguyenLieuChiTiet.setText(nguyenLieuBuilder.toString().trim());

            // ================== L·∫§Y C√ÅC B∆Ø·ªöC N·∫§U ==================
            StringBuilder buocLamBuilder = new StringBuilder();
            try (Cursor cursorBuocLam = db.rawQuery(
                    "SELECT moTaBuoc FROM BuocNau WHERE idMonAn = ? ORDER BY soThuTu ASC",
                    new String[]{String.valueOf(id)})) {
                int step = 1;
                while (cursorBuocLam.moveToNext()) {
                    buocLamBuilder.append(step++)
                            .append(". ")
                            .append(cursorBuocLam.getString(0))
                            .append("\n\n");
                }
            }
            txtBuocLamChiTiet.setText(buocLamBuilder.toString().trim());

        } finally {
            // ƒê·∫£m b·∫£o ƒë√≥ng DB khi xong
            if (db != null && db.isOpen()) db.close();
        }
    }

    // ================== H·ªòP THO·∫†I X√ÅC NH·∫¨N X√ìA ==================
    private void showDeleteConfirmDialog() {
        new AlertDialog.Builder(this)
                .setTitle("X√°c nh·∫≠n x√≥a")
                .setMessage("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a m√≥n ƒÉn n√†y kh√¥ng? Thao t√°c n√†y kh√¥ng th·ªÉ ho√†n t√°c.")
                .setPositiveButton("X√≥a", (dialog, which) -> deleteMonAn(currentMonAnId))
                .setNegativeButton("H·ªßy", null)
                .setIcon(android.R.drawable.ic_dialog_alert)
                .show();
    }

    // ================== H√ÄM X√ìA M√ìN ƒÇN V√Ä C√ÅC LI√äN K·∫æT ==================
    private void deleteMonAn(int id) {
        SQLiteDatabase db = dbHelper.getWritableDatabase();
        db.beginTransaction(); // B·∫Øt ƒë·∫ßu transaction ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh to√†n v·∫πn d·ªØ li·ªáu
        try {
            // X√≥a c√°c b∆∞·ªõc n·∫•u v√† nguy√™n li·ªáu li√™n quan tr∆∞·ªõc
            db.delete("BuocNau", "idMonAn = ?", new String[]{String.valueOf(id)});
            db.delete("NguyenLieu", "idMonAn = ?", new String[]{String.valueOf(id)});
            db.delete("MonAn", "idMonAn = ?", new String[]{String.valueOf(id)});

            // ‚úÖ ƒê√°nh d·∫•u transaction th√†nh c√¥ng
            db.setTransactionSuccessful();

            Toast.makeText(this, "ƒê√£ x√≥a m√≥n ƒÉn th√†nh c√¥ng!", Toast.LENGTH_SHORT).show();
            finish(); // Quay l·∫°i m√†n h√¨nh tr∆∞·ªõc
        } catch (Exception e) {
            Toast.makeText(this, "L·ªói khi x√≥a m√≥n ƒÉn!", Toast.LENGTH_SHORT).show();
        } finally {
            db.endTransaction(); // K·∫øt th√∫c transaction
            if (db.isOpen()) db.close();
        }
    }
}
